一个类允许客户端获取其实例的传统方式是提供一个公共构造方法和提供一个公共静态工厂方法。
一、公共构造方法VS公共静态工厂方法

静态工厂方法的一个优点是，不像构造方法，它们是有名字的
静态工厂方法的第二个优点是，与构造方法不同，它们不需要每次调用时都创建一个新对象
静态工厂方法的第三个优点是，与构造方法不同，它们可以返回其返回类型的任何子类型的对象
静态工厂的第 5 个优点是，在编写包含该方法的类时，返回的对象的类不需要存在

缺点: 只提供静态工厂方法的主要限制是，没有公共或受保护构造方法的类不能被子类化
静态工厂方法的第二个缺点是，程序员很难找到它们


静态工厂和构造方法都有一个限制：它们不能很好地扩展到很多可选参数的情景, 应该为这样的类编写什么样的构造方法或静态工厂?

二、扩展很多可选参数
可伸缩构造方法模式:
缺点： 可伸缩构造方法模式是有效的，但是当有很多参数时，很难编写客户端代码，而且很难读懂它

JavaBeans模式:
描述: 在这种模式中，调用一个无参数的构造函数来创建对象，然后调用setter方法来设置每个必需的参数和可选参数
缺点: 由于构造方法在多次调用中被分割，所以在构造过程中JavaBean可能处于不一致的状态。该类没有通过检查构造参数的有效性来执行一致性的选项。

Builder 模式:
缺点: 为了创建对象，首先必须创建它的 builder。虽然创建这个 builder 的成本在实践中不太可能被注意到，但在性能关键的情况下可能会出现问题。
而且，builder 模式比伸缩构造方法模式更冗长，因此只有在 有足够的参数时才值得使用它，比如四个或更多.
优点: builder 比 JavaBeans 更安全.

三、使用私有构造方法或枚类实现 Singleton 属性

第一种方法中，成员是 final 修饰的属性
第二个实现单例的方法中，公共成员是一个静态的工厂方法
第三种方法是声明单一元素的枚举类

四、
